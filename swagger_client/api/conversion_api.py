# coding: utf-8

"""
    Fonts API

    Everything Fonts Font API gives you API access to fonts, font properties and font tools. You can get all the details about font upto the individual glyph level and do amazing things with it. This is a first of its kind on the cloud. Font conversion API allows you to easily convert between various font formats using REST API. ttf,otf,svg,pfa,pfb, svg, woff,woff2, eot, ufo and several other formats are supported. Here are the individual API links:    ## Font Management API ##   All the things you need to manage a font on the cloud. [Click here to subscribe](https://everythingfonts.com/api/font)   ## @font-face generation API ##   Easily generate @font-face kit from variety of font formats. This service lets you generate ttf, otf, svg and woff formats that the browsers understand along with the relevant CSS definition. [Click here to subscribe](https://everythingfonts.com/api/ffgen)    ## Font Coversion API ##   Convert from one font format to another. Many many font format conversions are supported. [Click here to subscribe](https://everythingfonts.com/api/convert)   ## Font Subsetting API ##   Subset fonts easily. You can specify unicode range or individual characters for subsettings. [Click here to subscribe](https://everythingfonts.com/api/subset)   ## Font Hinting API ##   Font hinting on the cloud. Multiple hinting schemes supported. [Click here to subscribe](https://everythingfonts.com/api/hinting)   # noqa: E501

    OpenAPI spec version: 2.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ConversionApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def font_convert_schedule_get(self, id, **kwargs):  # noqa: E501
        """font_convert_schedule_get  # noqa: E501

        Get details about the schduled font conversion.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.font_convert_schedule_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Schedule ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.font_convert_schedule_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.font_convert_schedule_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def font_convert_schedule_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """font_convert_schedule_get  # noqa: E501

        Get details about the schduled font conversion.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.font_convert_schedule_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Schedule ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method font_convert_schedule_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `font_convert_schedule_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-EverythingFonts-Api-Secret']  # noqa: E501

        return self.api_client.call_api(
            '/font/convert/schedule', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def font_convert_schedule_put(self, fontid, targetformat, **kwargs):  # noqa: E501
        """font_convert_schedule_put  # noqa: E501

        Schdule a font conversion. If your font file is greater than 2 MB choose the schedule option, since synchronous requests may timeout.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.font_convert_schedule_put(fontid, targetformat, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fontid: Font ID (required)
        :param str targetformat: Target Format to convert to  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.font_convert_schedule_put_with_http_info(fontid, targetformat, **kwargs)  # noqa: E501
        else:
            (data) = self.font_convert_schedule_put_with_http_info(fontid, targetformat, **kwargs)  # noqa: E501
            return data

    def font_convert_schedule_put_with_http_info(self, fontid, targetformat, **kwargs):  # noqa: E501
        """font_convert_schedule_put  # noqa: E501

        Schdule a font conversion. If your font file is greater than 2 MB choose the schedule option, since synchronous requests may timeout.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.font_convert_schedule_put_with_http_info(fontid, targetformat, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fontid: Font ID (required)
        :param str targetformat: Target Format to convert to  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fontid', 'targetformat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method font_convert_schedule_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fontid' is set
        if ('fontid' not in params or
                params['fontid'] is None):
            raise ValueError("Missing the required parameter `fontid` when calling `font_convert_schedule_put`")  # noqa: E501
        # verify the required parameter 'targetformat' is set
        if ('targetformat' not in params or
                params['targetformat'] is None):
            raise ValueError("Missing the required parameter `targetformat` when calling `font_convert_schedule_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fontid' in params:
            query_params.append(('fontid', params['fontid']))  # noqa: E501
        if 'targetformat' in params:
            query_params.append(('targetformat', params['targetformat']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-EverythingFonts-Api-Secret']  # noqa: E501

        return self.api_client.call_api(
            '/font/convert/schedule', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def font_convert_targets_get(self, sourceformat, **kwargs):  # noqa: E501
        """font_convert_targets_get  # noqa: E501

        Get the possible conversion targets for a given source format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.font_convert_targets_get(sourceformat, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sourceformat: Source Format (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.font_convert_targets_get_with_http_info(sourceformat, **kwargs)  # noqa: E501
        else:
            (data) = self.font_convert_targets_get_with_http_info(sourceformat, **kwargs)  # noqa: E501
            return data

    def font_convert_targets_get_with_http_info(self, sourceformat, **kwargs):  # noqa: E501
        """font_convert_targets_get  # noqa: E501

        Get the possible conversion targets for a given source format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.font_convert_targets_get_with_http_info(sourceformat, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sourceformat: Source Format (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sourceformat']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method font_convert_targets_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sourceformat' is set
        if ('sourceformat' not in params or
                params['sourceformat'] is None):
            raise ValueError("Missing the required parameter `sourceformat` when calling `font_convert_targets_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sourceformat' in params:
            query_params.append(('sourceformat', params['sourceformat']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-EverythingFonts-Api-Secret']  # noqa: E501

        return self.api_client.call_api(
            '/font/convert/targets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def font_id_convert_get(self, id, targetformat, **kwargs):  # noqa: E501
        """font_id_convert_get  # noqa: E501

        Convert the font to the target format and download the result.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.font_id_convert_get(id, targetformat, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Font ID (required)
        :param str targetformat: Target format you want to convert to (required)
        :param bool binaryresult: Return converted file in binary format, the default is base64 json response.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.font_id_convert_get_with_http_info(id, targetformat, **kwargs)  # noqa: E501
        else:
            (data) = self.font_id_convert_get_with_http_info(id, targetformat, **kwargs)  # noqa: E501
            return data

    def font_id_convert_get_with_http_info(self, id, targetformat, **kwargs):  # noqa: E501
        """font_id_convert_get  # noqa: E501

        Convert the font to the target format and download the result.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.font_id_convert_get_with_http_info(id, targetformat, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Font ID (required)
        :param str targetformat: Target format you want to convert to (required)
        :param bool binaryresult: Return converted file in binary format, the default is base64 json response.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'targetformat', 'binaryresult']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method font_id_convert_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `font_id_convert_get`")  # noqa: E501
        # verify the required parameter 'targetformat' is set
        if ('targetformat' not in params or
                params['targetformat'] is None):
            raise ValueError("Missing the required parameter `targetformat` when calling `font_id_convert_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'targetformat' in params:
            query_params.append(('targetformat', params['targetformat']))  # noqa: E501
        if 'binaryresult' in params:
            query_params.append(('binaryresult', params['binaryresult']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-EverythingFonts-Api-Secret']  # noqa: E501

        return self.api_client.call_api(
            '/font/{id}/convert', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
